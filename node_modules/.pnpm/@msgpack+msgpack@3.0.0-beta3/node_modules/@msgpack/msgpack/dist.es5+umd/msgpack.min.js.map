{"version":3,"file":"msgpack.min.js","mappings":"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","sources":["webpack://MessagePack/webpack/universalModuleDefinition","webpack://MessagePack/webpack/bootstrap","webpack://MessagePack/webpack/runtime/define property getters","webpack://MessagePack/webpack/runtime/hasOwnProperty shorthand","webpack://MessagePack/webpack/runtime/make namespace object","webpack://MessagePack/./src/utils/utf8.ts","webpack://MessagePack/./src/ExtData.ts","webpack://MessagePack/./src/DecodeError.ts","webpack://MessagePack/./src/utils/int.ts","webpack://MessagePack/./src/timestamp.ts","webpack://MessagePack/./src/ExtensionCodec.ts","webpack://MessagePack/./src/utils/typedArrays.ts","webpack://MessagePack/./src/Encoder.ts","webpack://MessagePack/./src/encode.ts","webpack://MessagePack/./src/utils/prettyByte.ts","webpack://MessagePack/./src/CachedKeyDecoder.ts","webpack://MessagePack/./src/Decoder.ts","webpack://MessagePack/./src/decode.ts","webpack://MessagePack/./src/utils/stream.ts","webpack://MessagePack/./src/decodeAsync.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MessagePack\"] = factory();\n\telse\n\t\troot[\"MessagePack\"] = factory();\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export function utf8Count(str: string): number {\n  const strLength = str.length;\n\n  let byteLength = 0;\n  let pos = 0;\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      byteLength++;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      byteLength += 2;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        byteLength += 3;\n      } else {\n        // 4-byte\n        byteLength += 4;\n      }\n    }\n  }\n  return byteLength;\n}\n\nexport function utf8EncodeJs(str: string, output: Uint8Array, outputOffset: number): void {\n  const strLength = str.length;\n  let offset = outputOffset;\n  let pos = 0;\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      output[offset++] = value;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      output[offset++] = ((value >> 6) & 0x1f) | 0xc0;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        output[offset++] = ((value >> 12) & 0x0f) | 0xe0;\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n      } else {\n        // 4-byte\n        output[offset++] = ((value >> 18) & 0x07) | 0xf0;\n        output[offset++] = ((value >> 12) & 0x3f) | 0x80;\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n      }\n    }\n\n    output[offset++] = (value & 0x3f) | 0x80;\n  }\n}\n\n// TextEncoder and TextDecoder are standardized in whatwg encoding:\n// https://encoding.spec.whatwg.org/\n// and available in all the modern browsers:\n// https://caniuse.com/textencoder\n// They are available in Node.js since v12 LTS as well:\n// https://nodejs.org/api/globals.html#textencoder\n\nconst sharedTextEncoder = new TextEncoder();\n\n// This threshold should be determined by benchmarking, which might vary in engines and input data.\n// Run `npx ts-node benchmark/encode-string.ts` for details.\nconst TEXT_ENCODER_THRESHOLD = 50;\n\nexport function utf8EncodeTE(str: string, output: Uint8Array, outputOffset: number): void {\n  sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));\n}\n\nexport function utf8Encode(str: string, output: Uint8Array, outputOffset: number): void {\n  if (str.length > TEXT_ENCODER_THRESHOLD) {\n    utf8EncodeTE(str, output, outputOffset);\n  } else {\n    utf8EncodeJs(str, output, outputOffset);\n  }\n}\n\nconst CHUNK_SIZE = 0x1_000;\n\nexport function utf8DecodeJs(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  let offset = inputOffset;\n  const end = offset + byteLength;\n\n  const units: Array<number> = [];\n  let result = \"\";\n  while (offset < end) {\n    const byte1 = bytes[offset++]!;\n    if ((byte1 & 0x80) === 0) {\n      // 1 byte\n      units.push(byte1);\n    } else if ((byte1 & 0xe0) === 0xc0) {\n      // 2 bytes\n      const byte2 = bytes[offset++]! & 0x3f;\n      units.push(((byte1 & 0x1f) << 6) | byte2);\n    } else if ((byte1 & 0xf0) === 0xe0) {\n      // 3 bytes\n      const byte2 = bytes[offset++]! & 0x3f;\n      const byte3 = bytes[offset++]! & 0x3f;\n      units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\n    } else if ((byte1 & 0xf8) === 0xf0) {\n      // 4 bytes\n      const byte2 = bytes[offset++]! & 0x3f;\n      const byte3 = bytes[offset++]! & 0x3f;\n      const byte4 = bytes[offset++]! & 0x3f;\n      let unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n      if (unit > 0xffff) {\n        unit -= 0x10000;\n        units.push(((unit >>> 10) & 0x3ff) | 0xd800);\n        unit = 0xdc00 | (unit & 0x3ff);\n      }\n      units.push(unit);\n    } else {\n      units.push(byte1);\n    }\n\n    if (units.length >= CHUNK_SIZE) {\n      result += String.fromCharCode(...units);\n      units.length = 0;\n    }\n  }\n\n  if (units.length > 0) {\n    result += String.fromCharCode(...units);\n  }\n\n  return result;\n}\n\nconst sharedTextDecoder = new TextDecoder();\n\n// This threshold should be determined by benchmarking, which might vary in engines and input data.\n// Run `npx ts-node benchmark/decode-string.ts` for details.\nconst TEXT_DECODER_THRESHOLD = 200;\n\nexport function utf8DecodeTD(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);\n  return sharedTextDecoder.decode(stringBytes);\n}\n\nexport function utf8Decode(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  if (byteLength > TEXT_DECODER_THRESHOLD) {\n    return utf8DecodeTD(bytes, inputOffset, byteLength);\n  } else {\n    return utf8DecodeJs(bytes, inputOffset, byteLength);\n  }\n}\n","/**\n * ExtData is used to handle Extension Types that are not registered to ExtensionCodec.\n */\nexport class ExtData {\n  constructor(\n    readonly type: number,\n    readonly data: Uint8Array,\n  ) {}\n}\n","export class DecodeError extends Error {\n  constructor(message: string) {\n    super(message);\n\n    // fix the prototype chain in a cross-platform way\n    const proto: typeof DecodeError.prototype = Object.create(DecodeError.prototype);\n    Object.setPrototypeOf(this, proto);\n\n    Object.defineProperty(this, \"name\", {\n      configurable: true,\n      enumerable: false,\n      value: DecodeError.name,\n    });\n  }\n}\n","// Integer Utility\n\nexport const UINT32_MAX = 0xffff_ffff;\n\n// DataView extension to handle int64 / uint64,\n// where the actual range is 53-bits integer (a.k.a. safe integer)\n\nexport function setUint64(view: DataView, offset: number, value: number): void {\n  const high = value / 0x1_0000_0000;\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function setInt64(view: DataView, offset: number, value: number): void {\n  const high = Math.floor(value / 0x1_0000_0000);\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function getInt64(view: DataView, offset: number): number {\n  const high = view.getInt32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n\nexport function getUint64(view: DataView, offset: number): number {\n  const high = view.getUint32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n","// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\nimport { DecodeError } from \"./DecodeError\";\nimport { getInt64, setInt64 } from \"./utils/int\";\n\nexport const EXT_TIMESTAMP = -1;\n\nexport type TimeSpec = {\n  sec: number;\n  nsec: number;\n};\n\nconst TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\nconst TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\n\nexport function encodeTimeSpecToTimestamp({ sec, nsec }: TimeSpec): Uint8Array {\n  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\n    // Here sec >= 0 && nsec >= 0\n    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\n      // timestamp 32 = { sec32 (unsigned) }\n      const rv = new Uint8Array(4);\n      const view = new DataView(rv.buffer);\n      view.setUint32(0, sec);\n      return rv;\n    } else {\n      // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\n      const secHigh = sec / 0x100000000;\n      const secLow = sec & 0xffffffff;\n      const rv = new Uint8Array(8);\n      const view = new DataView(rv.buffer);\n      // nsec30 | secHigh2\n      view.setUint32(0, (nsec << 2) | (secHigh & 0x3));\n      // secLow32\n      view.setUint32(4, secLow);\n      return rv;\n    }\n  } else {\n    // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n    const rv = new Uint8Array(12);\n    const view = new DataView(rv.buffer);\n    view.setUint32(0, nsec);\n    setInt64(view, 4, sec);\n    return rv;\n  }\n}\n\nexport function encodeDateToTimeSpec(date: Date): TimeSpec {\n  const msec = date.getTime();\n  const sec = Math.floor(msec / 1e3);\n  const nsec = (msec - sec * 1e3) * 1e6;\n\n  // Normalizes { sec, nsec } to ensure nsec is unsigned.\n  const nsecInSec = Math.floor(nsec / 1e9);\n  return {\n    sec: sec + nsecInSec,\n    nsec: nsec - nsecInSec * 1e9,\n  };\n}\n\nexport function encodeTimestampExtension(object: unknown): Uint8Array | null {\n  if (object instanceof Date) {\n    const timeSpec = encodeDateToTimeSpec(object);\n    return encodeTimeSpecToTimestamp(timeSpec);\n  } else {\n    return null;\n  }\n}\n\nexport function decodeTimestampToTimeSpec(data: Uint8Array): TimeSpec {\n  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n\n  // data may be 32, 64, or 96 bits\n  switch (data.byteLength) {\n    case 4: {\n      // timestamp 32 = { sec32 }\n      const sec = view.getUint32(0);\n      const nsec = 0;\n      return { sec, nsec };\n    }\n    case 8: {\n      // timestamp 64 = { nsec30, sec34 }\n      const nsec30AndSecHigh2 = view.getUint32(0);\n      const secLow32 = view.getUint32(4);\n      const sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\n      const nsec = nsec30AndSecHigh2 >>> 2;\n      return { sec, nsec };\n    }\n    case 12: {\n      // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n\n      const sec = getInt64(view, 4);\n      const nsec = view.getUint32(0);\n      return { sec, nsec };\n    }\n    default:\n      throw new DecodeError(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${data.length}`);\n  }\n}\n\nexport function decodeTimestampExtension(data: Uint8Array): Date {\n  const timeSpec = decodeTimestampToTimeSpec(data);\n  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\n}\n\nexport const timestampExtension = {\n  type: EXT_TIMESTAMP,\n  encode: encodeTimestampExtension,\n  decode: decodeTimestampExtension,\n};\n","// ExtensionCodec to handle MessagePack extensions\n\nimport { ExtData } from \"./ExtData\";\nimport { timestampExtension } from \"./timestamp\";\n\nexport type ExtensionDecoderType<ContextType> = (\n  data: Uint8Array,\n  extensionType: number,\n  context: ContextType,\n) => unknown;\n\nexport type ExtensionEncoderType<ContextType> = (input: unknown, context: ContextType) => Uint8Array | null;\n\n// immutable interface to ExtensionCodec\nexport type ExtensionCodecType<ContextType> = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n  tryToEncode(object: unknown, context: ContextType): ExtData | null;\n  decode(data: Uint8Array, extType: number, context: ContextType): unknown;\n};\n\nexport class ExtensionCodec<ContextType = undefined> implements ExtensionCodecType<ContextType> {\n  public static readonly defaultCodec: ExtensionCodecType<undefined> = new ExtensionCodec();\n\n  // ensures ExtensionCodecType<X> matches ExtensionCodec<X>\n  // this will make type errors a lot more clear\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n\n  // built-in extensions\n  private readonly builtInEncoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly builtInDecoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  // custom extensions\n  private readonly encoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly decoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  public constructor() {\n    this.register(timestampExtension);\n  }\n\n  public register({\n    type,\n    encode,\n    decode,\n  }: {\n    type: number;\n    encode: ExtensionEncoderType<ContextType>;\n    decode: ExtensionDecoderType<ContextType>;\n  }): void {\n    if (type >= 0) {\n      // custom extensions\n      this.encoders[type] = encode;\n      this.decoders[type] = decode;\n    } else {\n      // built-in extensions\n      const index = 1 + type;\n      this.builtInEncoders[index] = encode;\n      this.builtInDecoders[index] = decode;\n    }\n  }\n\n  public tryToEncode(object: unknown, context: ContextType): ExtData | null {\n    // built-in extensions\n    for (let i = 0; i < this.builtInEncoders.length; i++) {\n      const encodeExt = this.builtInEncoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = -1 - i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    // custom extensions\n    for (let i = 0; i < this.encoders.length; i++) {\n      const encodeExt = this.encoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    if (object instanceof ExtData) {\n      // to keep ExtData as is\n      return object;\n    }\n    return null;\n  }\n\n  public decode(data: Uint8Array, type: number, context: ContextType): unknown {\n    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n    if (decodeExt) {\n      return decodeExt(data, type, context);\n    } else {\n      // decode() does not fail, returns ExtData instead.\n      return new ExtData(type, data);\n    }\n  }\n}\n","function isArrayBuffer(buffer: unknown): buffer is ArrayBuffer | SharedArrayBuffer {\n  return (\n    buffer instanceof ArrayBuffer || (typeof SharedArrayBuffer !== \"undefined\" && buffer instanceof SharedArrayBuffer)\n  );\n}\n\nexport function ensureUint8Array(\n  buffer: ArrayLike<number> | Uint8Array<ArrayBufferLike> | ArrayBufferView | ArrayBufferLike,\n): Uint8Array<ArrayBufferLike> {\n  if (buffer instanceof Uint8Array) {\n    return buffer;\n  } else if (ArrayBuffer.isView(buffer)) {\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  } else if (isArrayBuffer(buffer)) {\n    return new Uint8Array(buffer);\n  } else {\n    // ArrayLike<number>\n    return Uint8Array.from(buffer);\n  }\n}\n\nexport function createDataView(buffer: ArrayLike<number> | ArrayBufferView | ArrayBuffer): DataView<ArrayBufferLike> {\n  if (buffer instanceof ArrayBuffer) {\n    return new DataView(buffer);\n  }\n\n  const bufferView = ensureUint8Array(buffer);\n  return new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);\n}\n","import { utf8Count, utf8Encode } from \"./utils/utf8\";\nimport { ExtensionCodec, ExtensionCodecType } from \"./ExtensionCodec\";\nimport { setInt64, setUint64 } from \"./utils/int\";\nimport { ensureUint8Array } from \"./utils/typedArrays\";\nimport type { ExtData } from \"./ExtData\";\nimport type { ContextOf } from \"./context\";\n\nexport const DEFAULT_MAX_DEPTH = 100;\nexport const DEFAULT_INITIAL_BUFFER_SIZE = 2048;\n\nexport type EncoderOptions<ContextType = undefined> = Partial<\n  Readonly<{\n    extensionCodec: ExtensionCodecType<ContextType>;\n\n    /**\n     * Encodes bigint as Int64 or Uint64 if it's set to true.\n     * {@link forceIntegerToFloat} does not affect bigint.\n     * Depends on ES2020's {@link DataView#setBigInt64} and\n     * {@link DataView#setBigUint64}.\n     *\n     * Defaults to false.\n     */\n    useBigInt64: boolean;\n\n    /**\n     * The maximum depth in nested objects and arrays.\n     *\n     * Defaults to 100.\n     */\n    maxDepth: number;\n\n    /**\n     * The initial size of the internal buffer.\n     *\n     * Defaults to 2048.\n     */\n    initialBufferSize: number;\n\n    /**\n     * If `true`, the keys of an object is sorted. In other words, the encoded\n     * binary is canonical and thus comparable to another encoded binary.\n     *\n     * Defaults to `false`. If enabled, it spends more time in encoding objects.\n     */\n    sortKeys: boolean;\n    /**\n     * If `true`, non-integer numbers are encoded in float32, not in float64 (the default).\n     *\n     * Only use it if precisions don't matter.\n     *\n     * Defaults to `false`.\n     */\n    forceFloat32: boolean;\n\n    /**\n     * If `true`, an object property with `undefined` value are ignored.\n     * e.g. `{ foo: undefined }` will be encoded as `{}`, as `JSON.stringify()` does.\n     *\n     * Defaults to `false`. If enabled, it spends more time in encoding objects.\n     */\n    ignoreUndefined: boolean;\n\n    /**\n     * If `true`, integer numbers are encoded as floating point numbers,\n     * with the `forceFloat32` option taken into account.\n     *\n     * Defaults to `false`.\n     */\n    forceIntegerToFloat: boolean;\n  }>\n> &\n  ContextOf<ContextType>;\n\nexport class Encoder<ContextType = undefined> {\n  private readonly extensionCodec: ExtensionCodecType<ContextType>;\n  private readonly context: ContextType;\n  private readonly useBigInt64: boolean;\n  private readonly maxDepth: number;\n  private readonly initialBufferSize: number;\n  private readonly sortKeys: boolean;\n  private readonly forceFloat32: boolean;\n  private readonly ignoreUndefined: boolean;\n  private readonly forceIntegerToFloat: boolean;\n\n  private pos: number;\n  private view: DataView;\n  private bytes: Uint8Array;\n\n  public constructor(options?: EncoderOptions<ContextType>) {\n    this.extensionCodec = options?.extensionCodec ?? (ExtensionCodec.defaultCodec as ExtensionCodecType<ContextType>);\n    this.context = (options as { context: ContextType } | undefined)?.context as ContextType; // needs a type assertion because EncoderOptions has no context property when ContextType is undefined\n\n    this.useBigInt64 = options?.useBigInt64 ?? false;\n    this.maxDepth = options?.maxDepth ?? DEFAULT_MAX_DEPTH;\n    this.initialBufferSize = options?.initialBufferSize ?? DEFAULT_INITIAL_BUFFER_SIZE;\n    this.sortKeys = options?.sortKeys ?? false;\n    this.forceFloat32 = options?.forceFloat32 ?? false;\n    this.ignoreUndefined = options?.ignoreUndefined ?? false;\n    this.forceIntegerToFloat = options?.forceIntegerToFloat ?? false;\n\n    this.pos = 0;\n    this.view = new DataView(new ArrayBuffer(this.initialBufferSize));\n    this.bytes = new Uint8Array(this.view.buffer);\n  }\n\n  private reinitializeState() {\n    this.pos = 0;\n  }\n\n  /**\n   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.\n   *\n   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.\n   */\n  public encodeSharedRef(object: unknown): Uint8Array {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.subarray(0, this.pos);\n  }\n\n  /**\n   * @returns Encodes the object and returns a copy of the encoder's internal buffer.\n   */\n  public encode(object: unknown): Uint8Array {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.slice(0, this.pos);\n  }\n\n  private doEncode(object: unknown, depth: number): void {\n    if (depth > this.maxDepth) {\n      throw new Error(`Too deep objects in depth ${depth}`);\n    }\n\n    if (object == null) {\n      this.encodeNil();\n    } else if (typeof object === \"boolean\") {\n      this.encodeBoolean(object);\n    } else if (typeof object === \"number\") {\n      if (!this.forceIntegerToFloat) {\n        this.encodeNumber(object);\n      } else {\n        this.encodeNumberAsFloat(object);\n      }\n    } else if (typeof object === \"string\") {\n      this.encodeString(object);\n    } else if (this.useBigInt64 && typeof object === \"bigint\") {\n      this.encodeBigInt64(object);\n    } else {\n      this.encodeObject(object, depth);\n    }\n  }\n\n  private ensureBufferSizeToWrite(sizeToWrite: number) {\n    const requiredSize = this.pos + sizeToWrite;\n\n    if (this.view.byteLength < requiredSize) {\n      this.resizeBuffer(requiredSize * 2);\n    }\n  }\n\n  private resizeBuffer(newSize: number) {\n    const newBuffer = new ArrayBuffer(newSize);\n    const newBytes = new Uint8Array(newBuffer);\n    const newView = new DataView(newBuffer);\n\n    newBytes.set(this.bytes);\n\n    this.view = newView;\n    this.bytes = newBytes;\n  }\n\n  private encodeNil() {\n    this.writeU8(0xc0);\n  }\n\n  private encodeBoolean(object: boolean) {\n    if (object === false) {\n      this.writeU8(0xc2);\n    } else {\n      this.writeU8(0xc3);\n    }\n  }\n\n  private encodeNumber(object: number): void {\n    if (!this.forceIntegerToFloat && Number.isSafeInteger(object)) {\n      if (object >= 0) {\n        if (object < 0x80) {\n          // positive fixint\n          this.writeU8(object);\n        } else if (object < 0x100) {\n          // uint 8\n          this.writeU8(0xcc);\n          this.writeU8(object);\n        } else if (object < 0x10000) {\n          // uint 16\n          this.writeU8(0xcd);\n          this.writeU16(object);\n        } else if (object < 0x100000000) {\n          // uint 32\n          this.writeU8(0xce);\n          this.writeU32(object);\n        } else if (!this.useBigInt64) {\n          // uint 64\n          this.writeU8(0xcf);\n          this.writeU64(object);\n        } else {\n          this.encodeNumberAsFloat(object);\n        }\n      } else {\n        if (object >= -0x20) {\n          // negative fixint\n          this.writeU8(0xe0 | (object + 0x20));\n        } else if (object >= -0x80) {\n          // int 8\n          this.writeU8(0xd0);\n          this.writeI8(object);\n        } else if (object >= -0x8000) {\n          // int 16\n          this.writeU8(0xd1);\n          this.writeI16(object);\n        } else if (object >= -0x80000000) {\n          // int 32\n          this.writeU8(0xd2);\n          this.writeI32(object);\n        } else if (!this.useBigInt64) {\n          // int 64\n          this.writeU8(0xd3);\n          this.writeI64(object);\n        } else {\n          this.encodeNumberAsFloat(object);\n        }\n      }\n    } else {\n      this.encodeNumberAsFloat(object);\n    }\n  }\n\n  private encodeNumberAsFloat(object: number): void {\n    if (this.forceFloat32) {\n      // float 32\n      this.writeU8(0xca);\n      this.writeF32(object);\n    } else {\n      // float 64\n      this.writeU8(0xcb);\n      this.writeF64(object);\n    }\n  }\n\n  private encodeBigInt64(object: bigint): void {\n    if (object >= BigInt(0)) {\n      // uint 64\n      this.writeU8(0xcf);\n      this.writeBigUint64(object);\n    } else {\n      // int 64\n      this.writeU8(0xd3);\n      this.writeBigInt64(object);\n    }\n  }\n\n  private writeStringHeader(byteLength: number) {\n    if (byteLength < 32) {\n      // fixstr\n      this.writeU8(0xa0 + byteLength);\n    } else if (byteLength < 0x100) {\n      // str 8\n      this.writeU8(0xd9);\n      this.writeU8(byteLength);\n    } else if (byteLength < 0x10000) {\n      // str 16\n      this.writeU8(0xda);\n      this.writeU16(byteLength);\n    } else if (byteLength < 0x100000000) {\n      // str 32\n      this.writeU8(0xdb);\n      this.writeU32(byteLength);\n    } else {\n      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);\n    }\n  }\n\n  private encodeString(object: string) {\n    const maxHeaderSize = 1 + 4;\n\n    const byteLength = utf8Count(object);\n    this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n    this.writeStringHeader(byteLength);\n    utf8Encode(object, this.bytes, this.pos);\n    this.pos += byteLength;\n  }\n\n  private encodeObject(object: unknown, depth: number) {\n    // try to encode objects with custom codec first of non-primitives\n    const ext = this.extensionCodec.tryToEncode(object, this.context);\n    if (ext != null) {\n      this.encodeExtension(ext);\n    } else if (Array.isArray(object)) {\n      this.encodeArray(object, depth);\n    } else if (ArrayBuffer.isView(object)) {\n      this.encodeBinary(object);\n    } else if (typeof object === \"object\") {\n      this.encodeMap(object as Record<string, unknown>, depth);\n    } else {\n      // symbol, function and other special object come here unless extensionCodec handles them.\n      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);\n    }\n  }\n\n  private encodeBinary(object: ArrayBufferView) {\n    const size = object.byteLength;\n    if (size < 0x100) {\n      // bin 8\n      this.writeU8(0xc4);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // bin 16\n      this.writeU8(0xc5);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // bin 32\n      this.writeU8(0xc6);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large binary: ${size}`);\n    }\n    const bytes = ensureUint8Array(object);\n    this.writeU8a(bytes);\n  }\n\n  private encodeArray(object: Array<unknown>, depth: number) {\n    const size = object.length;\n    if (size < 16) {\n      // fixarray\n      this.writeU8(0x90 + size);\n    } else if (size < 0x10000) {\n      // array 16\n      this.writeU8(0xdc);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // array 32\n      this.writeU8(0xdd);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large array: ${size}`);\n    }\n    for (const item of object) {\n      this.doEncode(item, depth + 1);\n    }\n  }\n\n  private countWithoutUndefined(object: Record<string, unknown>, keys: ReadonlyArray<string>): number {\n    let count = 0;\n\n    for (const key of keys) {\n      if (object[key] !== undefined) {\n        count++;\n      }\n    }\n\n    return count;\n  }\n\n  private encodeMap(object: Record<string, unknown>, depth: number) {\n    const keys = Object.keys(object);\n    if (this.sortKeys) {\n      keys.sort();\n    }\n\n    const size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;\n\n    if (size < 16) {\n      // fixmap\n      this.writeU8(0x80 + size);\n    } else if (size < 0x10000) {\n      // map 16\n      this.writeU8(0xde);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // map 32\n      this.writeU8(0xdf);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large map object: ${size}`);\n    }\n\n    for (const key of keys) {\n      const value = object[key];\n\n      if (!(this.ignoreUndefined && value === undefined)) {\n        this.encodeString(key);\n        this.doEncode(value, depth + 1);\n      }\n    }\n  }\n\n  private encodeExtension(ext: ExtData) {\n    const size = ext.data.length;\n    if (size === 1) {\n      // fixext 1\n      this.writeU8(0xd4);\n    } else if (size === 2) {\n      // fixext 2\n      this.writeU8(0xd5);\n    } else if (size === 4) {\n      // fixext 4\n      this.writeU8(0xd6);\n    } else if (size === 8) {\n      // fixext 8\n      this.writeU8(0xd7);\n    } else if (size === 16) {\n      // fixext 16\n      this.writeU8(0xd8);\n    } else if (size < 0x100) {\n      // ext 8\n      this.writeU8(0xc7);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // ext 16\n      this.writeU8(0xc8);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // ext 32\n      this.writeU8(0xc9);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large extension object: ${size}`);\n    }\n    this.writeI8(ext.type);\n    this.writeU8a(ext.data);\n  }\n\n  private writeU8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setUint8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU8a(values: ArrayLike<number>) {\n    const size = values.length;\n    this.ensureBufferSizeToWrite(size);\n\n    this.bytes.set(values, this.pos);\n    this.pos += size;\n  }\n\n  private writeI8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setInt8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setUint16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeI16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setInt16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeU32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setUint32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeI32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setInt32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setFloat32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    this.view.setFloat64(this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeU64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setUint64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeI64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setInt64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeBigUint64(value: bigint) {\n    this.ensureBufferSizeToWrite(8);\n\n    this.view.setBigUint64(this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeBigInt64(value: bigint) {\n    this.ensureBufferSizeToWrite(8);\n\n    this.view.setBigInt64(this.pos, value);\n    this.pos += 8;\n  }\n}\n","import { Encoder } from \"./Encoder\";\nimport type { EncoderOptions } from \"./Encoder\";\nimport type { SplitUndefined } from \"./context\";\n\n/**\n * @deprecated Use {@link EncoderOptions} instead.\n */\nexport type EncodeOptions = never;\n\n/**\n * @deprecated No longer supported.\n */\nexport const defaultEncodeOptions: never = undefined as never;\n\n/**\n * It encodes `value` in the MessagePack format and\n * returns a byte buffer.\n *\n * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.\n */\nexport function encode<ContextType = undefined>(\n  value: unknown,\n  options?: EncoderOptions<SplitUndefined<ContextType>>,\n): Uint8Array {\n  const encoder = new Encoder(options);\n  return encoder.encodeSharedRef(value);\n}\n","export function prettyByte(byte: number): string {\n  return `${byte < 0 ? \"-\" : \"\"}0x${Math.abs(byte).toString(16).padStart(2, \"0\")}`;\n}\n","import { utf8DecodeJs } from \"./utils/utf8\";\n\nconst DEFAULT_MAX_KEY_LENGTH = 16;\nconst DEFAULT_MAX_LENGTH_PER_KEY = 16;\n\nexport interface KeyDecoder {\n  canBeCached(byteLength: number): boolean;\n  decode(bytes: Uint8Array, inputOffset: number, byteLength: number): string;\n}\ninterface KeyCacheRecord {\n  readonly bytes: Uint8Array;\n  readonly str: string;\n}\n\nexport class CachedKeyDecoder implements KeyDecoder {\n  hit = 0;\n  miss = 0;\n  private readonly caches: Array<Array<KeyCacheRecord>>;\n\n  constructor(\n    readonly maxKeyLength = DEFAULT_MAX_KEY_LENGTH,\n    readonly maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY,\n  ) {\n    // avoid `new Array(N)`, which makes a sparse array,\n    // because a sparse array is typically slower than a non-sparse array.\n    this.caches = [];\n    for (let i = 0; i < this.maxKeyLength; i++) {\n      this.caches.push([]);\n    }\n  }\n\n  public canBeCached(byteLength: number): boolean {\n    return byteLength > 0 && byteLength <= this.maxKeyLength;\n  }\n\n  private find(bytes: Uint8Array, inputOffset: number, byteLength: number): string | null {\n    const records = this.caches[byteLength - 1]!;\n\n    FIND_CHUNK: for (const record of records) {\n      const recordBytes = record.bytes;\n\n      for (let j = 0; j < byteLength; j++) {\n        if (recordBytes[j] !== bytes[inputOffset + j]) {\n          continue FIND_CHUNK;\n        }\n      }\n      return record.str;\n    }\n    return null;\n  }\n\n  private store(bytes: Uint8Array, value: string) {\n    const records = this.caches[bytes.length - 1]!;\n    const record: KeyCacheRecord = { bytes, str: value };\n\n    if (records.length >= this.maxLengthPerKey) {\n      // `records` are full!\n      // Set `record` to an arbitrary position.\n      records[(Math.random() * records.length) | 0] = record;\n    } else {\n      records.push(record);\n    }\n  }\n\n  public decode(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n    const cachedValue = this.find(bytes, inputOffset, byteLength);\n    if (cachedValue != null) {\n      this.hit++;\n      return cachedValue;\n    }\n    this.miss++;\n\n    const str = utf8DecodeJs(bytes, inputOffset, byteLength);\n    // Ensure to copy a slice of bytes because the byte may be NodeJS Buffer and Buffer#slice() returns a reference to its internal ArrayBuffer.\n    const slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);\n    this.store(slicedCopyOfBytes, str);\n    return str;\n  }\n}\n","import { prettyByte } from \"./utils/prettyByte\";\nimport { ExtensionCodec, ExtensionCodecType } from \"./ExtensionCodec\";\nimport { getInt64, getUint64, UINT32_MAX } from \"./utils/int\";\nimport { utf8Decode } from \"./utils/utf8\";\nimport { createDataView, ensureUint8Array } from \"./utils/typedArrays\";\nimport { CachedKeyDecoder, KeyDecoder } from \"./CachedKeyDecoder\";\nimport { DecodeError } from \"./DecodeError\";\nimport type { ContextOf } from \"./context\";\n\nexport type DecoderOptions<ContextType = undefined> = Readonly<\n  Partial<{\n    extensionCodec: ExtensionCodecType<ContextType>;\n\n    /**\n     * Decodes Int64 and Uint64 as bigint if it's set to true.\n     * Depends on ES2020's {@link DataView#getBigInt64} and\n     * {@link DataView#getBigUint64}.\n     *\n     * Defaults to false.\n     */\n    useBigInt64: boolean;\n\n    /**\n     * By default, string values will be decoded as UTF-8 strings. However, if this option is true,\n     * string values will be returned as Uint8Arrays without additional decoding.\n     * \n     * This is useful if the strings may contain invalid UTF-8 sequences.\n     * \n     * Note that this option only applies to string values, not map keys. Additionally, when\n     * enabled, raw string length is limited by the maxBinLength option.\n     */\n    rawStrings: boolean;\n\n    /**\n     * Maximum string length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxStrLength: number;\n    /**\n     * Maximum binary length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxBinLength: number;\n    /**\n     * Maximum array length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxArrayLength: number;\n    /**\n     * Maximum map length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxMapLength: number;\n    /**\n     * Maximum extension length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxExtLength: number;\n\n    /**\n     * An object key decoder. Defaults to the shared instance of {@link CachedKeyDecoder}.\n     * `null` is a special value to disable the use of the key decoder at all.\n     */\n    keyDecoder: KeyDecoder | null;\n  }>\n> &\n  ContextOf<ContextType>;\n\nconst STATE_ARRAY = \"array\";\nconst STATE_MAP_KEY = \"map_key\";\nconst STATE_MAP_VALUE = \"map_value\";\n\ntype MapKeyType = string | number;\n\nconst isValidMapKeyType = (key: unknown): key is MapKeyType => {\n  return typeof key === \"string\" || typeof key === \"number\";\n};\n\ntype StackMapState = {\n  type: typeof STATE_MAP_KEY | typeof STATE_MAP_VALUE;\n  size: number;\n  key: MapKeyType | null;\n  readCount: number;\n  map: Record<string, unknown>;\n};\n\ntype StackArrayState = {\n  type: typeof STATE_ARRAY;\n  size: number;\n  array: Array<unknown>;\n  position: number;\n};\n\nclass StackPool {\n  private readonly stack: Array<StackState> = [];\n  private stackHeadPosition = -1;\n\n  public get length(): number {\n    return this.stackHeadPosition + 1;\n  }\n\n  public top(): StackState | undefined {\n    return this.stack[this.stackHeadPosition];\n  }\n\n  public pushArrayState(size: number) {\n    const state = this.getUninitializedStateFromPool() as StackArrayState;\n\n    state.type = STATE_ARRAY;\n    state.position = 0;\n    state.size = size;\n    state.array = new Array(size);\n  }\n\n  public pushMapState(size: number) {\n    const state = this.getUninitializedStateFromPool() as StackMapState;\n\n    state.type = STATE_MAP_KEY;\n    state.readCount = 0;\n    state.size = size;\n    state.map = {};\n  }\n\n  private getUninitializedStateFromPool() {\n    this.stackHeadPosition++;\n\n    if (this.stackHeadPosition === this.stack.length) {\n      const partialState: Partial<StackState> = {\n        type: undefined,\n        size: 0,\n        array: undefined,\n        position: 0,\n        readCount: 0,\n        map: undefined,\n        key: null,\n      };\n\n      this.stack.push(partialState as StackState);\n    }\n\n    return this.stack[this.stackHeadPosition];\n  }\n\n  public release(state: StackState): void {\n    const topStackState = this.stack[this.stackHeadPosition];\n\n    if (topStackState !== state) {\n      throw new Error(\"Invalid stack state. Released state is not on top of the stack.\");\n    }\n\n    if (state.type === STATE_ARRAY) {\n      const partialState = state as Partial<StackArrayState>;\n      partialState.size = 0;\n      partialState.array = undefined;\n      partialState.position = 0;\n      partialState.type = undefined;\n    }\n\n    if (state.type === STATE_MAP_KEY || state.type === STATE_MAP_VALUE) {\n      const partialState = state as Partial<StackMapState>;\n      partialState.size = 0;\n      partialState.map = undefined;\n      partialState.readCount = 0;\n      partialState.type = undefined;\n    }\n\n    this.stackHeadPosition--;\n  }\n\n  public reset(): void {\n    this.stack.length = 0;\n    this.stackHeadPosition = -1;\n  }\n}\n\ntype StackState = StackArrayState | StackMapState;\n\nconst HEAD_BYTE_REQUIRED = -1;\n\nconst EMPTY_VIEW = new DataView<ArrayBufferLike>(new ArrayBuffer(0));\nconst EMPTY_BYTES = new Uint8Array<ArrayBufferLike>(EMPTY_VIEW.buffer);\n\ntry {\n  // IE11: The spec says it should throw RangeError,\n  // IE11: but in IE11 it throws TypeError.\n  EMPTY_VIEW.getInt8(0);\n} catch (e) {\n  if (!(e instanceof RangeError)) {\n    throw new Error(\n      \"This module is not supported in the current JavaScript engine because DataView does not throw RangeError on out-of-bounds access\",\n    );\n  }\n}\nexport const DataViewIndexOutOfBoundsError = RangeError;\n\nconst MORE_DATA = new DataViewIndexOutOfBoundsError(\"Insufficient data\");\n\nconst sharedCachedKeyDecoder = new CachedKeyDecoder();\n\nexport class Decoder<ContextType = undefined> {\n  private readonly extensionCodec: ExtensionCodecType<ContextType>;\n  private readonly context: ContextType;\n  private readonly useBigInt64: boolean;\n  private readonly rawStrings: boolean;\n  private readonly maxStrLength: number;\n  private readonly maxBinLength: number;\n  private readonly maxArrayLength: number;\n  private readonly maxMapLength: number;\n  private readonly maxExtLength: number;\n  private readonly keyDecoder: KeyDecoder | null;\n\n  private totalPos = 0;\n  private pos = 0;\n\n  private view = EMPTY_VIEW;\n  private bytes = EMPTY_BYTES;\n  private headByte = HEAD_BYTE_REQUIRED;\n  private readonly stack = new StackPool();\n\n  public constructor(options?: DecoderOptions<ContextType>) {\n    this.extensionCodec = options?.extensionCodec ?? (ExtensionCodec.defaultCodec as ExtensionCodecType<ContextType>);\n    this.context = (options as { context: ContextType } | undefined)?.context as ContextType; // needs a type assertion because EncoderOptions has no context property when ContextType is undefined\n\n    this.useBigInt64 = options?.useBigInt64 ?? false;\n    this.rawStrings = options?.rawStrings ?? false;\n    this.maxStrLength = options?.maxStrLength ?? UINT32_MAX;\n    this.maxBinLength = options?.maxBinLength ?? UINT32_MAX;\n    this.maxArrayLength = options?.maxArrayLength ?? UINT32_MAX;\n    this.maxMapLength = options?.maxMapLength ?? UINT32_MAX;\n    this.maxExtLength = options?.maxExtLength ?? UINT32_MAX;\n    this.keyDecoder = options?.keyDecoder !== undefined ? options.keyDecoder : sharedCachedKeyDecoder;\n  }\n\n  private reinitializeState() {\n    this.totalPos = 0;\n    this.headByte = HEAD_BYTE_REQUIRED;\n    this.stack.reset();\n\n    // view, bytes, and pos will be re-initialized in setBuffer()\n  }\n\n  private setBuffer(buffer: ArrayLike<number> | ArrayBufferView | ArrayBufferLike): void {\n    this.bytes = ensureUint8Array(buffer);\n    this.view = createDataView(this.bytes);\n    this.pos = 0;\n  }\n\n  private appendBuffer(buffer: ArrayLike<number> | ArrayBufferView | ArrayBufferLike): void {\n    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {\n      this.setBuffer(buffer);\n    } else {\n      const remainingData = this.bytes.subarray(this.pos);\n      const newData = ensureUint8Array(buffer);\n\n      // concat remainingData + newData\n      const newBuffer = new Uint8Array(remainingData.length + newData.length);\n      newBuffer.set(remainingData);\n      newBuffer.set(newData, remainingData.length);\n      this.setBuffer(newBuffer);\n    }\n  }\n\n  private hasRemaining(size: number) {\n    return this.view.byteLength - this.pos >= size;\n  }\n\n  private createExtraByteError(posToShow: number): Error {\n    const { view, pos } = this;\n    return new RangeError(`Extra ${view.byteLength - pos} of ${view.byteLength} byte(s) found at buffer[${posToShow}]`);\n  }\n\n  /**\n   * @throws {@link DecodeError}\n   * @throws {@link RangeError}\n   */\n  public decode(buffer: ArrayLike<number> | ArrayBufferView | ArrayBufferLike): unknown {\n    this.reinitializeState();\n    this.setBuffer(buffer);\n\n    const object = this.doDecodeSync();\n    if (this.hasRemaining(1)) {\n      throw this.createExtraByteError(this.pos);\n    }\n    return object;\n  }\n\n  public *decodeMulti(buffer: ArrayLike<number> | BufferSource): Generator<unknown, void, unknown> {\n    this.reinitializeState();\n    this.setBuffer(buffer);\n\n    while (this.hasRemaining(1)) {\n      yield this.doDecodeSync();\n    }\n  }\n\n  public async decodeAsync(stream: AsyncIterable<ArrayLike<number> | BufferSource>): Promise<unknown> {\n    let decoded = false;\n    let object: unknown;\n    for await (const buffer of stream) {\n      if (decoded) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      try {\n        object = this.doDecodeSync();\n        decoded = true;\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n\n    if (decoded) {\n      if (this.hasRemaining(1)) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n      return object;\n    }\n\n    const { headByte, pos, totalPos } = this;\n    throw new RangeError(\n      `Insufficient data in parsing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`,\n    );\n  }\n\n  public decodeArrayStream(\n    stream: AsyncIterable<ArrayLike<number> | BufferSource>,\n  ): AsyncGenerator<unknown, void, unknown> {\n    return this.decodeMultiAsync(stream, true);\n  }\n\n  public decodeStream(stream: AsyncIterable<ArrayLike<number> | BufferSource>): AsyncGenerator<unknown, void, unknown> {\n    return this.decodeMultiAsync(stream, false);\n  }\n\n  private async *decodeMultiAsync(stream: AsyncIterable<ArrayLike<number> | BufferSource>, isArray: boolean) {\n    let isArrayHeaderRequired = isArray;\n    let arrayItemsLeft = -1;\n\n    for await (const buffer of stream) {\n      if (isArray && arrayItemsLeft === 0) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      if (isArrayHeaderRequired) {\n        arrayItemsLeft = this.readArraySize();\n        isArrayHeaderRequired = false;\n        this.complete();\n      }\n\n      try {\n        while (true) {\n          yield this.doDecodeSync();\n          if (--arrayItemsLeft === 0) {\n            break;\n          }\n        }\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n  }\n\n  private doDecodeSync(): unknown {\n    DECODE: while (true) {\n      const headByte = this.readHeadByte();\n      let object: unknown;\n\n      if (headByte >= 0xe0) {\n        // negative fixint (111x xxxx) 0xe0 - 0xff\n        object = headByte - 0x100;\n      } else if (headByte < 0xc0) {\n        if (headByte < 0x80) {\n          // positive fixint (0xxx xxxx) 0x00 - 0x7f\n          object = headByte;\n        } else if (headByte < 0x90) {\n          // fixmap (1000 xxxx) 0x80 - 0x8f\n          const size = headByte - 0x80;\n          if (size !== 0) {\n            this.pushMapState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = {};\n          }\n        } else if (headByte < 0xa0) {\n          // fixarray (1001 xxxx) 0x90 - 0x9f\n          const size = headByte - 0x90;\n          if (size !== 0) {\n            this.pushArrayState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = [];\n          }\n        } else {\n          // fixstr (101x xxxx) 0xa0 - 0xbf\n          const byteLength = headByte - 0xa0;\n          object = this.decodeString(byteLength, 0);\n        }\n      } else if (headByte === 0xc0) {\n        // nil\n        object = null;\n      } else if (headByte === 0xc2) {\n        // false\n        object = false;\n      } else if (headByte === 0xc3) {\n        // true\n        object = true;\n      } else if (headByte === 0xca) {\n        // float 32\n        object = this.readF32();\n      } else if (headByte === 0xcb) {\n        // float 64\n        object = this.readF64();\n      } else if (headByte === 0xcc) {\n        // uint 8\n        object = this.readU8();\n      } else if (headByte === 0xcd) {\n        // uint 16\n        object = this.readU16();\n      } else if (headByte === 0xce) {\n        // uint 32\n        object = this.readU32();\n      } else if (headByte === 0xcf) {\n        // uint 64\n        if (this.useBigInt64) {\n          object = this.readU64AsBigInt();\n        } else {\n          object = this.readU64();\n        }\n      } else if (headByte === 0xd0) {\n        // int 8\n        object = this.readI8();\n      } else if (headByte === 0xd1) {\n        // int 16\n        object = this.readI16();\n      } else if (headByte === 0xd2) {\n        // int 32\n        object = this.readI32();\n      } else if (headByte === 0xd3) {\n        // int 64\n        if (this.useBigInt64) {\n          object = this.readI64AsBigInt();\n        } else {\n          object = this.readI64();\n        }\n      } else if (headByte === 0xd9) {\n        // str 8\n        const byteLength = this.lookU8();\n        object = this.decodeString(byteLength, 1);\n      } else if (headByte === 0xda) {\n        // str 16\n        const byteLength = this.lookU16();\n        object = this.decodeString(byteLength, 2);\n      } else if (headByte === 0xdb) {\n        // str 32\n        const byteLength = this.lookU32();\n        object = this.decodeString(byteLength, 4);\n      } else if (headByte === 0xdc) {\n        // array 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xdd) {\n        // array 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xde) {\n        // map 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xdf) {\n        // map 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xc4) {\n        // bin 8\n        const size = this.lookU8();\n        object = this.decodeBinary(size, 1);\n      } else if (headByte === 0xc5) {\n        // bin 16\n        const size = this.lookU16();\n        object = this.decodeBinary(size, 2);\n      } else if (headByte === 0xc6) {\n        // bin 32\n        const size = this.lookU32();\n        object = this.decodeBinary(size, 4);\n      } else if (headByte === 0xd4) {\n        // fixext 1\n        object = this.decodeExtension(1, 0);\n      } else if (headByte === 0xd5) {\n        // fixext 2\n        object = this.decodeExtension(2, 0);\n      } else if (headByte === 0xd6) {\n        // fixext 4\n        object = this.decodeExtension(4, 0);\n      } else if (headByte === 0xd7) {\n        // fixext 8\n        object = this.decodeExtension(8, 0);\n      } else if (headByte === 0xd8) {\n        // fixext 16\n        object = this.decodeExtension(16, 0);\n      } else if (headByte === 0xc7) {\n        // ext 8\n        const size = this.lookU8();\n        object = this.decodeExtension(size, 1);\n      } else if (headByte === 0xc8) {\n        // ext 16\n        const size = this.lookU16();\n        object = this.decodeExtension(size, 2);\n      } else if (headByte === 0xc9) {\n        // ext 32\n        const size = this.lookU32();\n        object = this.decodeExtension(size, 4);\n      } else {\n        throw new DecodeError(`Unrecognized type byte: ${prettyByte(headByte)}`);\n      }\n\n      this.complete();\n\n      const stack = this.stack;\n      while (stack.length > 0) {\n        // arrays and maps\n        const state = stack.top()!;\n        if (state.type === STATE_ARRAY) {\n          state.array[state.position] = object;\n          state.position++;\n          if (state.position === state.size) {\n            object = state.array;\n            stack.release(state);\n          } else {\n            continue DECODE;\n          }\n        } else if (state.type === STATE_MAP_KEY) {\n          if (!isValidMapKeyType(object)) {\n            throw new DecodeError(\"The type of key must be string or number but \" + typeof object);\n          }\n          if (object === \"__proto__\") {\n            throw new DecodeError(\"The key __proto__ is not allowed\");\n          }\n\n          state.key = object;\n          state.type = STATE_MAP_VALUE;\n          continue DECODE;\n        } else {\n          // it must be `state.type === State.MAP_VALUE` here\n\n          state.map[state.key!] = object;\n          state.readCount++;\n\n          if (state.readCount === state.size) {\n            object = state.map;\n            stack.release(state);\n          } else {\n            state.key = null;\n            state.type = STATE_MAP_KEY;\n            continue DECODE;\n          }\n        }\n      }\n\n      return object;\n    }\n  }\n\n  private readHeadByte(): number {\n    if (this.headByte === HEAD_BYTE_REQUIRED) {\n      this.headByte = this.readU8();\n      // console.log(\"headByte\", prettyByte(this.headByte));\n    }\n\n    return this.headByte;\n  }\n\n  private complete(): void {\n    this.headByte = HEAD_BYTE_REQUIRED;\n  }\n\n  private readArraySize(): number {\n    const headByte = this.readHeadByte();\n\n    switch (headByte) {\n      case 0xdc:\n        return this.readU16();\n      case 0xdd:\n        return this.readU32();\n      default: {\n        if (headByte < 0xa0) {\n          return headByte - 0x90;\n        } else {\n          throw new DecodeError(`Unrecognized array type byte: ${prettyByte(headByte)}`);\n        }\n      }\n    }\n  }\n\n  private pushMapState(size: number) {\n    if (size > this.maxMapLength) {\n      throw new DecodeError(`Max length exceeded: map length (${size}) > maxMapLengthLength (${this.maxMapLength})`);\n    }\n\n    this.stack.pushMapState(size);\n  }\n\n  private pushArrayState(size: number) {\n    if (size > this.maxArrayLength) {\n      throw new DecodeError(`Max length exceeded: array length (${size}) > maxArrayLength (${this.maxArrayLength})`);\n    }\n\n    this.stack.pushArrayState(size);\n  }\n\n  private decodeString(byteLength: number, headerOffset: number): string | Uint8Array {\n    if (!this.rawStrings || this.stateIsMapKey()) {\n      return this.decodeUtf8String(byteLength, headerOffset);\n    }\n    return this.decodeBinary(byteLength, headerOffset);\n  }\n\n  private decodeUtf8String(byteLength: number, headerOffset: number): string {\n    if (byteLength > this.maxStrLength) {\n      throw new DecodeError(\n        `Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`,\n      );\n    }\n\n    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headerOffset;\n    let object: string;\n    if (this.stateIsMapKey() && this.keyDecoder?.canBeCached(byteLength)) {\n      object = this.keyDecoder.decode(this.bytes, offset, byteLength);\n    } else {\n      object = utf8Decode(this.bytes, offset, byteLength);\n    }\n    this.pos += headerOffset + byteLength;\n    return object;\n  }\n\n  private stateIsMapKey(): boolean {\n    if (this.stack.length > 0) {\n      const state = this.stack.top()!;\n      return state.type === STATE_MAP_KEY;\n    }\n    return false;\n  }\n\n  private decodeBinary(byteLength: number, headOffset: number): Uint8Array {\n    if (byteLength > this.maxBinLength) {\n      throw new DecodeError(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);\n    }\n\n    if (!this.hasRemaining(byteLength + headOffset)) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headOffset;\n    const object = this.bytes.subarray(offset, offset + byteLength);\n    this.pos += headOffset + byteLength;\n    return object;\n  }\n\n  private decodeExtension(size: number, headOffset: number): unknown {\n    if (size > this.maxExtLength) {\n      throw new DecodeError(`Max length exceeded: ext length (${size}) > maxExtLength (${this.maxExtLength})`);\n    }\n\n    const extType = this.view.getInt8(this.pos + headOffset);\n    const data = this.decodeBinary(size, headOffset + 1 /* extType */);\n    return this.extensionCodec.decode(data, extType, this.context);\n  }\n\n  private lookU8() {\n    return this.view.getUint8(this.pos);\n  }\n\n  private lookU16() {\n    return this.view.getUint16(this.pos);\n  }\n\n  private lookU32() {\n    return this.view.getUint32(this.pos);\n  }\n\n  private readU8(): number {\n    const value = this.view.getUint8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  private readI8(): number {\n    const value = this.view.getInt8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  private readU16(): number {\n    const value = this.view.getUint16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  private readI16(): number {\n    const value = this.view.getInt16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  private readU32(): number {\n    const value = this.view.getUint32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readI32(): number {\n    const value = this.view.getInt32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readU64(): number {\n    const value = getUint64(this.view, this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  private readI64(): number {\n    const value = getInt64(this.view, this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  private readU64AsBigInt(): bigint {\n    const value = this.view.getBigUint64(this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  private readI64AsBigInt(): bigint {\n    const value = this.view.getBigInt64(this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  private readF32() {\n    const value = this.view.getFloat32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readF64() {\n    const value = this.view.getFloat64(this.pos);\n    this.pos += 8;\n    return value;\n  }\n}\n","import { Decoder } from \"./Decoder\";\nimport type { DecoderOptions } from \"./Decoder\";\nimport type { SplitUndefined } from \"./context\";\n\n/**\n * @deprecated Use {@link DecoderOptions} instead.\n */\nexport type DecodeOptions = never;\n\n/**\n * @deprecated No longer supported.\n */\nexport const defaultDecodeOptions: never = undefined as never;\n\n/**\n * It decodes a single MessagePack object in a buffer.\n *\n * This is a synchronous decoding function.\n * See other variants for asynchronous decoding: {@link decodeAsync}, {@link decodeStream}, or {@link decodeArrayStream}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decode<ContextType = undefined>(\n  buffer: ArrayLike<number> | ArrayBufferView | ArrayBufferLike,\n  options?: DecoderOptions<SplitUndefined<ContextType>>,\n): unknown {\n  const decoder = new Decoder(options);\n  return decoder.decode(buffer);\n}\n\n/**\n * It decodes multiple MessagePack objects in a buffer.\n * This is corresponding to {@link decodeMultiStream}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decodeMulti<ContextType = undefined>(\n  buffer: ArrayLike<number> | BufferSource,\n  options?: DecoderOptions<SplitUndefined<ContextType>>,\n): Generator<unknown, void, unknown> {\n  const decoder = new Decoder(options);\n  return decoder.decodeMulti(buffer);\n}\n","// utility for whatwg streams\n\n// The living standard of whatwg streams says\n// ReadableStream is also AsyncIterable, but\n// as of June 2019, no browser implements it.\n// See https://streams.spec.whatwg.org/ for details\nexport type ReadableStreamLike<T> = AsyncIterable<T> | ReadableStream<T>;\n\nexport function isAsyncIterable<T>(object: ReadableStreamLike<T>): object is AsyncIterable<T> {\n  return (object as any)[Symbol.asyncIterator] != null;\n}\n\nfunction assertNonNull<T>(value: T | null | undefined): asserts value is T {\n  if (value == null) {\n    throw new Error(\"Assertion Failure: value must not be null nor undefined\");\n  }\n}\n\nexport async function* asyncIterableFromStream<T>(stream: ReadableStream<T>): AsyncIterable<T> {\n  const reader = stream.getReader();\n\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        return;\n      }\n      assertNonNull(value);\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function ensureAsyncIterable<T>(streamLike: ReadableStreamLike<T>): AsyncIterable<T> {\n  if (isAsyncIterable(streamLike)) {\n    return streamLike;\n  } else {\n    return asyncIterableFromStream(streamLike);\n  }\n}\n","import { Decoder } from \"./Decoder\";\nimport { ensureAsyncIterable } from \"./utils/stream\";\nimport type { DecoderOptions } from \"./Decoder\";\nimport type { ReadableStreamLike } from \"./utils/stream\";\nimport type { SplitUndefined } from \"./context\";\n\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport async function decodeAsync<ContextType = undefined>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options?: DecoderOptions<SplitUndefined<ContextType>>,\n): Promise<unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n  const decoder = new Decoder(options);\n  return decoder.decodeAsync(stream);\n}\n\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decodeArrayStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options?: DecoderOptions<SplitUndefined<ContextType>>,\n): AsyncGenerator<unknown, void, unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n  const decoder = new Decoder(options);\n  return decoder.decodeArrayStream(stream);\n}\n\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decodeMultiStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options?: DecoderOptions<SplitUndefined<ContextType>>,\n): AsyncGenerator<unknown, void, unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n  const decoder = new Decoder(options);\n  return decoder.decodeStream(stream);\n}\n\n/**\n * @deprecated Use {@link decodeMultiStream} instead.\n */\nexport const decodeStream: never = undefined as never;\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","sharedTextEncoder","TextEncoder","utf8DecodeJs","bytes","inputOffset","byteLength","offset","end","units","result","byte1","byte2","push","byte3","unit","length","String","fromCharCode","sharedTextDecoder","TextDecoder","type","data","message","proto","create","DecodeError","setPrototypeOf","configurable","name","Error","UINT32_MAX","setInt64","view","high","Math","floor","low","setUint32","getInt64","getInt32","getUint32","EXT_TIMESTAMP","TIMESTAMP32_MAX_SEC","TIMESTAMP64_MAX_SEC","encodeTimeSpecToTimestamp","sec","nsec","rv","Uint8Array","DataView","buffer","secHigh","secLow","encodeDateToTimeSpec","date","msec","getTime","nsecInSec","encodeTimestampExtension","object","Date","decodeTimestampToTimeSpec","byteOffset","nsec30AndSecHigh2","decodeTimestampExtension","timeSpec","timestampExtension","encode","decode","builtInEncoders","builtInDecoders","encoders","decoders","register","index","tryToEncode","context","i","encodeExt","ExtData","decodeExt","defaultCodec","ExtensionCodec","ensureUint8Array","ArrayBuffer","isView","SharedArrayBuffer","isArrayBuffer","from","options","extensionCodec","useBigInt64","maxDepth","initialBufferSize","sortKeys","forceFloat32","ignoreUndefined","forceIntegerToFloat","pos","reinitializeState","encodeSharedRef","doEncode","subarray","slice","depth","encodeNil","encodeBoolean","encodeNumberAsFloat","encodeNumber","encodeString","encodeBigInt64","encodeObject","ensureBufferSizeToWrite","sizeToWrite","requiredSize","resizeBuffer","newSize","newBuffer","newBytes","newView","set","writeU8","Number","isSafeInteger","writeU16","writeU32","writeU64","writeI8","writeI16","writeI32","writeI64","writeF32","writeF64","BigInt","writeBigUint64","writeBigInt64","writeStringHeader","str","output","outputOffset","strLength","charCodeAt","extra","utf8Count","encodeInto","utf8EncodeTE","utf8EncodeJs","ext","encodeExtension","Array","isArray","encodeArray","encodeBinary","toString","apply","encodeMap","size","writeU8a","item","countWithoutUndefined","keys","count","undefined","sort","setUint8","values","setInt8","setUint16","setInt16","setInt32","setFloat32","setFloat64","setUint64","setBigUint64","setBigInt64","Encoder","prettyByte","byte","abs","padStart","maxKeyLength","maxLengthPerKey","hit","miss","caches","canBeCached","find","records","FIND_CHUNK","record","recordBytes","j","store","random","cachedValue","slicedCopyOfBytes","STATE_ARRAY","STATE_MAP_KEY","STATE_MAP_VALUE","stack","stackHeadPosition","top","pushArrayState","state","getUninitializedStateFromPool","position","array","pushMapState","readCount","map","release","partialState","reset","EMPTY_VIEW","EMPTY_BYTES","getInt8","e","RangeError","DataViewIndexOutOfBoundsError","MORE_DATA","sharedCachedKeyDecoder","CachedKeyDecoder","totalPos","headByte","StackPool","rawStrings","maxStrLength","maxBinLength","maxArrayLength","maxMapLength","maxExtLength","keyDecoder","setBuffer","bufferView","createDataView","appendBuffer","hasRemaining","remainingData","newData","createExtraByteError","posToShow","doDecodeSync","decodeMulti","decodeAsync","stream","decoded","decodeArrayStream","decodeMultiAsync","decodeStream","isArrayHeaderRequired","arrayItemsLeft","readArraySize","complete","DECODE","readHeadByte","decodeString","readF32","readF64","readU8","readU16","readU32","readU64AsBigInt","readU64","readI8","readI16","readI32","readI64AsBigInt","readI64","lookU8","lookU16","lookU32","decodeBinary","decodeExtension","headerOffset","stateIsMapKey","decodeUtf8String","stringBytes","utf8DecodeTD","utf8Decode","headOffset","extType","getUint8","getUint16","getInt16","getBigUint64","getBigInt64","getFloat32","getFloat64","Decoder","ensureAsyncIterable","streamLike","asyncIterator","reader","getReader","read","done","assertNonNull","releaseLock","asyncIterableFromStream","decodeMultiStream"],"sourceRoot":""}