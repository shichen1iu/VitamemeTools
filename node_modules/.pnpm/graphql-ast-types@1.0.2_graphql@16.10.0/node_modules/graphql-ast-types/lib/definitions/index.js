"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defineType;
exports.chain = chain;
exports.assertEach = assertEach;
exports.assertOneOf = assertOneOf;
exports.assertNodeType = assertNodeType;
exports.assertNodeOrValueType = assertNodeOrValueType;
exports.assertValueType = assertValueType;
exports.assertArrayOf = assertArrayOf;
const t = require("../index");

const BUILDER_KEYS = exports.BUILDER_KEYS = {};
const NODE_FIELDS = exports.NODE_FIELDS = {};
const ALIAS_KEYS = exports.ALIAS_KEYS = {};

/**
 * Used to define an AST node.
 * @param {String} type The AST node name
 * @param {Object} opts Type definition object
 * @returns {void}
 */
function defineType(type, { fields = {}, aliases = [], builder = [] } = {}) {
  for (const key in fields) {
    const field = fields[key];

    // Sets field as optional if builder exist but validator does not.
    if (builder.indexOf(key) === -1) {
      field.optional = true;
    }
  }

  BUILDER_KEYS[type] = builder;
  NODE_FIELDS[type] = fields;
  ALIAS_KEYS[type] = aliases;
}

function getType(val) {
  if (Array.isArray(val)) {
    return "array";
  } else if (val === null) {
    return "null";
  } else if (val === undefined) {
    return "undefined";
  } else {
    return typeof val;
  }
}

// Validation helpers

function chain(...fns) {
  return function validate(...args) {
    fns.forEach(fn => fn(...args));
  };
}

function assertEach(callback) {
  function validator(node, key, val) {
    if (!Array.isArray(val)) {
      return;
    }

    val.forEach((it, i) => callback(node, `${key}[${i}]`, it));
  }
  return validator;
}

function assertOneOf(...vals) {
  function validate(node, key, val) {
    if (vals.indexOf(val.kind) < 0) {
      throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(vals)} but got ${JSON.stringify(val)}`);
    }
  }

  return validate;
}

function assertNodeType(...types) {
  function validate(node, key, val) {
    const valid = types.every(type => t.is(type, val));

    if (!valid) {
      throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} ` + `but instead got ${JSON.stringify(val && val.type)}`);
    }
  }

  return validate;
}

function assertNodeOrValueType(...types) {
  function validate(node, key, val) {
    const valid = types.every(type => getType(val) === type || t.is(type, val));

    if (!valid) {
      throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} ` + `but instead got ${JSON.stringify(val && val.type)}`);
    }
  }

  return validate;
}

function assertValueType(type) {
  function validate(node, key, val) {
    const valid = getType(val) === type;

    if (!valid) {
      throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`);
    }
  }

  return validate;
}

function assertArrayOf(cb) {
  return chain(assertValueType("array"), assertEach(cb));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kZWZpbml0aW9ucy9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWZpbmVUeXBlIiwiY2hhaW4iLCJhc3NlcnRFYWNoIiwiYXNzZXJ0T25lT2YiLCJhc3NlcnROb2RlVHlwZSIsImFzc2VydE5vZGVPclZhbHVlVHlwZSIsImFzc2VydFZhbHVlVHlwZSIsImFzc2VydEFycmF5T2YiLCJ0IiwicmVxdWlyZSIsIkJVSUxERVJfS0VZUyIsIk5PREVfRklFTERTIiwiQUxJQVNfS0VZUyIsInR5cGUiLCJmaWVsZHMiLCJhbGlhc2VzIiwiYnVpbGRlciIsImtleSIsImZpZWxkIiwiaW5kZXhPZiIsIm9wdGlvbmFsIiwiZ2V0VHlwZSIsInZhbCIsIkFycmF5IiwiaXNBcnJheSIsInVuZGVmaW5lZCIsImZucyIsInZhbGlkYXRlIiwiYXJncyIsImZvckVhY2giLCJmbiIsImNhbGxiYWNrIiwidmFsaWRhdG9yIiwibm9kZSIsIml0IiwiaSIsInZhbHMiLCJraW5kIiwiVHlwZUVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsInR5cGVzIiwidmFsaWQiLCJldmVyeSIsImlzIiwiY2IiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQTBCd0JBLFU7UUFnQ1JDLEssR0FBQUEsSztRQU1BQyxVLEdBQUFBLFU7UUFXQUMsVyxHQUFBQSxXO1FBY0FDLGMsR0FBQUEsYztRQWdCQUMscUIsR0FBQUEscUI7UUFnQkFDLGUsR0FBQUEsZTtRQWNBQyxhLEdBQUFBLGE7QUF0SWhCLE1BQU1DLElBQUlDLFFBQVEsVUFBUixDQUFWOztBQU9PLE1BQU1DLHNDQUFrRCxFQUF4RDtBQUNBLE1BQU1DLG9DQUVULEVBRkc7QUFHQSxNQUFNQyxrQ0FBZ0QsRUFBdEQ7O0FBUVA7Ozs7OztBQU1lLFNBQVNaLFVBQVQsQ0FDYmEsSUFEYSxFQUViLEVBQUVDLFNBQVMsRUFBWCxFQUFlQyxVQUFVLEVBQXpCLEVBQTZCQyxVQUFVLEVBQXZDLEtBQXNELEVBRnpDLEVBR2I7QUFDQSxPQUFLLE1BQU1DLEdB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QXhCLEVBQTZCSyxHQUE3QixFQUFrQztBQUNoQyxVQUFNb0IsUUFBUUQsTUFBTUUsS0FBTixDQUFZOUIsUUFBUVEsUUFBUUMsR0FBUixNQUFpQlQsSUFBakIsSUFBeUJMLEVBQUVvQyxFQUFGLENBQUsvQixJQUFMLEVBQVdTLEdBQVgsQ0FBN0MsQ0FBZDs7QUFFQSxRQUFJLENBQUNvQixLQUFMLEVBQVk7QUFDVixZQUFNLElBQUlKLFNBQUosQ0FDSCxZQUFXckIsR0FBSSxPQUFNZ0IsS0FBS3BCLElBQUssa0NBQWlDMEIsS0FBS0MsU0FBTCxDQUMvREMsS0FEK0QsQ0FFL0QsR0FGRixHQUVRLG1CQUFrQkYsS0FBS0MsU0FBTCxDQUFlbEIsT0FBT0EsSUFBSVQsSUFBMUIsQ0FBZ0MsRUFIdEQsQ0FBTjtBQUtEO0FBQ0Y7O0FBRUQsU0FBT2MsUUFBUDtBQUNEOztBQUVNLFNBQVNyQixlQUFULENBQXlCTyxJQUF6QixFQUFpRDtBQUN0RCxXQUFTYyxRQUFULENBQWtCTSxJQUFsQixFQUF3QmhCLEdBQXhCLEVBQTZCSyxHQUE3QixFQUFrQztBQUNoQyxVQUFNb0IsUUFBUXJCLFFBQVFDLEdBQVIsTUFBaUJULElBQS9COztBQUVBLFFBQUksQ0FBQzZCLEtBQUwsRUFBWTtBQUNWLFlBQU0sSUFBSUosU0FBSixDQUNILFlBQVdyQixHQUFJLHFCQUFvQkosSUFBSyxZQUFXUSxRQUFRQyxHQUFSLENBQWEsRUFEN0QsQ0FBTjtBQUdEO0FBQ0Y7O0FBRUQsU0FBT0ssUUFBUDtBQUNEOztBQUVNLFNBQVNwQixhQUFULENBQXVCc0MsRUFBdkIsRUFBK0M7QUFDcEQsU0FBTzVDLE1BQU1LLGdCQUFnQixPQUFoQixDQUFOLEVBQWdDSixXQUFXMkMsRUFBWCxDQUFoQyxDQUFQO0FBQ0QiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuY29uc3QgdCA9IHJlcXVpcmUoXCIuLi9pbmRleFwiKTtcblxudHlwZSBWYWxpZGF0b3IgPSB7XG4gIHZhbGlkYXRlOiBGdW5jdGlvbixcbiAgb3B0aW9uYWw/OiBib29sZWFuXG59O1xuXG5leHBvcnQgY29uc3QgQlVJTERFUl9LRVlTOiB7IFt0eXBlOiBzdHJpbmddOiBBcnJheTxzdHJpbmc+IH0gPSB7fTtcbmV4cG9ydCBjb25zdCBOT0RFX0ZJRUxEUzoge1xuICBbdHlwZTogc3RyaW5nXTogeyBbZmllbGRLZXk6IHN0cmluZ106IFZhbGlkYXRvciB9XG59ID0ge307XG5leHBvcnQgY29uc3QgQUxJQVNfS0VZUzogeyBbdHlwZTogc3RyaW5nXTogQXJyYXk8c3RyaW5nPiB9ID0ge307XG5cbnR5cGUgT3B0aW9uID0ge1xuICBmaWVsZHM/OiB7IFtmaWVsZEtleTogc3RyaW5nXTogVmFsaWRhdG9yIH0sXG4gIGFsaWFzZXM/OiBBcnJheTxzdHJpbmc+LFxuICBidWlsZGVyPzogQXJyYXk8c3RyaW5nPiAvLyBOb2RlIHByb3BlcnRpZXMgdG8gYmUgdHJhbnNmb3JtZWQgaW50byBwYXJhbXNcbn07XG5cbi8qKlxuICogVXNlZCB0byBkZWZpbmUgYW4gQVNUIG5vZGUuXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgQVNUIG5vZGUgbmFtZVxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVHlwZSBkZWZpbml0aW9uIG9iamVjdFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmluZVR5cGUoXG4gIHR5cGU6IHN0cmluZyxcbiAgeyBmaWVsZHMgPSB7fSwgYWxpYXNlcyA9IFtdLCBidWlsZGVyID0gW10gfTogT3B0aW9uID0ge31cbikge1xuICBmb3IgKGNvbnN0IGtleSBpbiBmaWVsZHMpIHtcbiAgICBjb25zdCBmaWVsZCA9IGZpZWxkc1trZXldO1xuXG4gICAgLy8gU2V0cyBmaWVsZCBhcyBvcHRpb25hbCBpZiBidWlsZGVyIGV4aXN0IGJ1dCB2YWxpZGF0b3IgZG9lcyBub3QuXG4gICAgaWYgKGJ1aWxkZXIuaW5kZXhPZihrZXkpID09PSAtMSkge1xuICAgICAgZmllbGQub3B0aW9uYWwgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIEJVSUxERVJfS0VZU1t0eXBlXSA9IGJ1aWxkZXI7XG4gIE5PREVfRklFTERTW3R5cGVdID0gZmllbGRzO1xuICBBTElBU19LRVlTW3R5cGVdID0gYWxpYXNlcztcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZSh2YWwpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgIHJldHVybiBcImFycmF5XCI7XG4gIH0gZWxzZSBpZiAodmFsID09PSBudWxsKSB7XG4gICAgcmV0dXJuIFwibnVsbFwiO1xuICB9IGVsc2UgaWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIFwidW5kZWZpbmVkXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWw7XG4gIH1cbn1cblxuLy8gVmFsaWRhdGlvbiBoZWxwZXJzXG5cbmV4cG9ydCBmdW5jdGlvbiBjaGFpbiguLi5mbnM6IEFycmF5PEZ1bmN0aW9uPik6IEZ1bmN0aW9uIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHZhbGlkYXRlKC4uLmFyZ3MpIHtcbiAgICBmbnMuZm9yRWFjaChmbiA9PiBmbiguLi5hcmdzKSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRFYWNoKGNhbGxiYWNrOiBGdW5jdGlvbik6IEZ1bmN0aW9uIHtcbiAgZnVuY3Rpb24gdmFsaWRhdG9yKG5vZGUsIGtleSwgdmFsKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YWwuZm9yRWFjaCgoaXQsIGkpID0+IGNhbGxiYWNrKG5vZGUsIGAke2tleX1bJHtpfV1gLCBpdCkpO1xuICB9XG4gIHJldHVybiB2YWxpZGF0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRPbmVPZiguLi52YWxzOiBBcnJheTxzdHJpbmc+KTogRnVuY3Rpb24ge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShub2RlLCBrZXksIHZhbCkge1xuICAgIGlmICh2YWxzLmluZGV4T2YodmFsLmtpbmQpIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgYFByb3BlcnR5ICR7a2V5fSBleHBlY3RlZCB2YWx1ZSB0byBiZSBvbmUgb2YgJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICB2YWxzXG4gICAgICAgICl9IGJ1dCBnb3QgJHtKU09OLnN0cmluZ2lmeSh2YWwpfWBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhbGlkYXRlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0Tm9kZVR5cGUoLi4udHlwZXM6IEFycmF5PHN0cmluZz4pOiBGdW5jdGlvbiB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKG5vZGUsIGtleSwgdmFsKSB7XG4gICAgY29uc3QgdmFsaWQgPSB0eXBlcy5ldmVyeSh0eXBlID0+IHQuaXModHlwZSwgdmFsKSk7XG5cbiAgICBpZiAoIXZhbGlkKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBgUHJvcGVydHkgJHtrZXl9IG9mICR7bm9kZS50eXBlfSBleHBlY3RlZCBub2RlIHRvIGJlIG9mIGEgdHlwZSAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgIHR5cGVzXG4gICAgICAgICl9IGAgKyBgYnV0IGluc3RlYWQgZ290ICR7SlNPTi5zdHJpbmdpZnkodmFsICYmIHZhbC50eXBlKX1gXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YWxpZGF0ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydE5vZGVPclZhbHVlVHlwZSguLi50eXBlczogQXJyYXk8c3RyaW5nPik6IEZ1bmN0aW9uIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUobm9kZSwga2V5LCB2YWwpIHtcbiAgICBjb25zdCB2YWxpZCA9IHR5cGVzLmV2ZXJ5KHR5cGUgPT4gZ2V0VHlwZSh2YWwpID09PSB0eXBlIHx8IHQuaXModHlwZSwgdmFsKSk7XG5cbiAgICBpZiAoIXZhbGlkKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBgUHJvcGVydHkgJHtrZXl9IG9mICR7bm9kZS50eXBlfSBleHBlY3RlZCBub2RlIHRvIGJlIG9mIGEgdHlwZSAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgIHR5cGVzXG4gICAgICAgICl9IGAgKyBgYnV0IGluc3RlYWQgZ290ICR7SlNPTi5zdHJpbmdpZnkodmFsICYmIHZhbC50eXBlKX1gXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YWxpZGF0ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFZhbHVlVHlwZSh0eXBlOiBzdHJpbmcpOiBGdW5jdGlvbiB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKG5vZGUsIGtleSwgdmFsKSB7XG4gICAgY29uc3QgdmFsaWQgPSBnZXRUeXBlKHZhbCkgPT09IHR5cGU7XG5cbiAgICBpZiAoIXZhbGlkKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBgUHJvcGVydHkgJHtrZXl9IGV4cGVjdGVkIHR5cGUgb2YgJHt0eXBlfSBidXQgZ290ICR7Z2V0VHlwZSh2YWwpfWBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhbGlkYXRlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0QXJyYXlPZihjYjogRnVuY3Rpb24pOiBGdW5jdGlvbiB7XG4gIHJldHVybiBjaGFpbihhc3NlcnRWYWx1ZVR5cGUoXCJhcnJheVwiKSwgYXNzZXJ0RWFjaChjYikpO1xufVxuIl19