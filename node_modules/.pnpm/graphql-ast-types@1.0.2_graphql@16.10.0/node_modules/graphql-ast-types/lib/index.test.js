"use strict";

var _index = require("./index");

var t = _interopRequireWildcard(_index);

var _language = require("graphql/language");

var _stripIndent = require("strip-indent");

var _stripIndent2 = _interopRequireDefault(_stripIndent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

describe("GraphQL AST types", () => {
  it("can print queries and mutations with simple fields", () => {
    const ast = t.document([t.operationDefinition("query", t.selectionSet([t.field(t.name("foo")), t.field(t.name("bar"))])), t.operationDefinition("mutation", t.selectionSet([t.field(t.name("foo")), t.field(t.name("bar"))]))]);

    expect((0, _language.print)(ast).trim()).toEqual((0, _stripIndent2.default)(`
      {
        foo
        bar
      }

      mutation {
        foo
        bar
      }
    `).trim());
  });

  describe("GraphQL Definitions", () => {
    it("matches the existing snapshot", () => {
      expect(t.NODE_FIELDS).toMatchSnapshot("Node Fields");
      expect(t.ALIAS_KEYS).toMatchSnapshot("Alias Keys");
      expect(t.BUILDER_KEYS).toMatchSnapshot("Builder Keys");
      expect(t.FLIPPED_ALIAS_KEYS).toMatchSnapshot("Flipped Alias Keys");
    });
  });

  describe("nonNull", () => {
    it("should accept the following", () => {
      const nonNullFn = () => t.nonNullType(t.namedType(t.name("User")));
      expect(nonNullFn).not.toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50ZXN0LmpzIl0sIm5hbWVzIjpbInQiLCJkZXNjcmliZSIsIml0IiwiYXN0IiwiZG9jdW1lbnQiLCJvcGVyYXRpb25EZWZpbml0aW9uIiwic2VsZWN0aW9uU2V0IiwiZmllbGQiLCJuYW1lIiwiZXhwZWN0IiwidHJpbSIsInRvRXF1YWwiLCJOT0RFX0ZJRUxEUyIsInRvTWF0Y2hTbmFwc2hvdCIsIkFMSUFTX0tFWVMiLCJCVUlMREVSX0tFWVMiLCJGTElQUEVEX0FMSUFTX0tFWVMiLCJub25OdWxsRm4iLCJub25OdWxsVHlwZSIsIm5hbWVkVHlwZSIsIm5vdCIsInRvVGhyb3ciXSwibWFwcGluZ3MiOiI7O0FBQUE7O0lBQVlBLEM7O0FBQ1o7O0FBQ0E7Ozs7Ozs7O0FBRUFDLFNBQVMsbUJBQVQsRUFBOEIsTUFBTTtBQUNsQ0MsS0FBRyxvREFBSCxFQUF5RCxNQUFNO0FBQzdELFVBQU1DLE1BQU1ILEVBQUVJLFFBQUYsQ0FBVyxDQUNyQkosRUFBRUssbUJBQUYsQ0FDRSxPQURGLEVBRUVMLEVBQUVNLFlBQUYsQ0FBZSxDQUFDTixFQUFFTyxLQUFGLENBQVFQLEVBQUVRLElBQUYsQ0FBTyxLQUFQLENBQVIsQ0FBRCxFQUF5QlIsRUFBRU8sS0FBRixDQUFRUCxFQUFFUSxJQUFGLENBQU8sS0FBUCxDQUFSLENBQXpCLENBQWYsQ0FGRixDQURxQixFQUtyQlIsRUFBRUssbUJBQUYsQ0FDRSxVQURGLEVBRUVMLEVBQUVNLFlBQUYsQ0FBZSxDQUFDTixFQUFFTyxLQUFGLENBQVFQLEVBQUVRLElBQUYsQ0FBTyxLQUFQLENBQVIsQ0FBRCxFQUF5QlIsRUFBRU8sS0FBRixDQUFRUCxFQUFFUSxJQUFGLENBQU8sS0FBUCxDQUFSLENBQXpCLENBQWYsQ0FGRixDQUxxQixDQUFYLENBQVo7O0FBV0FDLFdBQU8scUJBQU1OLEdBQU4sRUFBV08sSUFBWCxFQUFQLEVBQTBCQyxPQUExQixDQUNFLDJCQUFhOzs7Ozs7Ozs7O0tBQWIsRUFVQ0QsSUFWRCxFQURGO0FBYUQsR0F6QkQ7O0FBMkJBVCxXQUFTLHFCQUFULEVBQWdDLE1BQU07QUFDcENDLE9BQUcsK0JBQUgsRUFBb0MsTUFBTTtBQUN4Q08sYUFBT1QsRUFBRVksV0FBVCxFQUFzQkMsZUFBdEIsQ0FBc0MsYUFBdEM7QUFDQUosYUFBT1QsRUFBRWMsVUFBVCxFQUFxQkQsZUFBckIsQ0FBcUMsWUFBckM7QUFDQUosYUFBT1QsRUFBRWUsWUFBVCxFQUF1QkYsZUFBdkIsQ0FBdUMsY0FBdkM7QUFDQUosYUFBT1QsRUFBRWdCLGtCQUFULEVBQTZCSCxlQUE3QixDQUE2QyxvQkFBN0M7QUFDRCxLQUxEO0FBTUQsR0FQRDs7QUFTQVosV0FBUyxTQUFULEVBQW9CLE1BQU07QUFDeEJDLE9BQUcsNkJBQUgsRUFBa0MsTUFBTTtBQUN0QyxZQUFNZSxZQUFZLE1BQU1qQixFQUFFa0IsV0FBRixDQUFjbEIsRUFBRW1CLFNBQUYsQ0FBWW5CLEVBQUVRLElBQUYsQ0FBTyxNQUFQLENBQVosQ0FBZCxDQUF4QjtBQUNBQyxhQUFPUSxTQUFQLEVBQWtCRyxHQUFsQixDQUFzQkMsT0FBdEI7QUFDRCxLQUhEO0FBSUQsR0FMRDtBQU1ELENBM0NEIiwiZmlsZSI6ImluZGV4LnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgeyBwcmludCB9IGZyb20gXCJncmFwaHFsL2xhbmd1YWdlXCI7XG5pbXBvcnQgc3RyaXBJbmRlbnQgZnJvbSBcInN0cmlwLWluZGVudFwiO1xuXG5kZXNjcmliZShcIkdyYXBoUUwgQVNUIHR5cGVzXCIsICgpID0+IHtcbiAgaXQoXCJjYW4gcHJpbnQgcXVlcmllcyBhbmQgbXV0YXRpb25zIHdpdGggc2ltcGxlIGZpZWxkc1wiLCAoKSA9PiB7XG4gICAgY29uc3QgYXN0ID0gdC5kb2N1bWVudChbXG4gICAgICB0Lm9wZXJhdGlvbkRlZmluaXRpb24oXG4gICAgICAgIFwicXVlcnlcIixcbiAgICAgICAgdC5zZWxlY3Rpb25TZXQoW3QuZmllbGQodC5uYW1lKFwiZm9vXCIpKSwgdC5maWVsZCh0Lm5hbWUoXCJiYXJcIikpXSlcbiAgICAgICksXG4gICAgICB0Lm9wZXJhdGlvbkRlZmluaXRpb24oXG4gICAgICAgIFwibXV0YXRpb25cIixcbiAgICAgICAgdC5zZWxlY3Rpb25TZXQoW3QuZmllbGQodC5uYW1lKFwiZm9vXCIpKSwgdC5maWVsZCh0Lm5hbWUoXCJiYXJcIikpXSlcbiAgICAgIClcbiAgICBdKTtcblxuICAgIGV4cGVjdChwcmludChhc3QpLnRyaW0oKSkudG9FcXVhbChcbiAgICAgIHN0cmlwSW5kZW50KGBcbiAgICAgIHtcbiAgICAgICAgZm9vXG4gICAgICAgIGJhclxuICAgICAgfVxuXG4gICAgICBtdXRhdGlvbiB7XG4gICAgICAgIGZvb1xuICAgICAgICBiYXJcbiAgICAgIH1cbiAgICBgKS50cmltKClcbiAgICApO1xuICB9KTtcblxuICBkZXNjcmliZShcIkdyYXBoUUwgRGVmaW5pdGlvbnNcIiwgKCkgPT4ge1xuICAgIGl0KFwibWF0Y2hlcyB0aGUgZXhpc3Rpbmcgc25hcHNob3RcIiwgKCkgPT4ge1xuICAgICAgZXhwZWN0KHQuTk9ERV9GSUVMRFMpLnRvTWF0Y2hTbmFwc2hvdChcIk5vZGUgRmllbGRzXCIpO1xuICAgICAgZXhwZWN0KHQuQUxJQVNfS0VZUykudG9NYXRjaFNuYXBzaG90KFwiQWxpYXMgS2V5c1wiKTtcbiAgICAgIGV4cGVjdCh0LkJVSUxERVJfS0VZUykudG9NYXRjaFNuYXBzaG90KFwiQnVpbGRlciBLZXlzXCIpO1xuICAgICAgZXhwZWN0KHQuRkxJUFBFRF9BTElBU19LRVlTKS50b01hdGNoU25hcHNob3QoXCJGbGlwcGVkIEFsaWFzIEtleXNcIik7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwibm9uTnVsbFwiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgYWNjZXB0IHRoZSBmb2xsb3dpbmdcIiwgKCkgPT4ge1xuICAgICAgY29uc3Qgbm9uTnVsbEZuID0gKCkgPT4gdC5ub25OdWxsVHlwZSh0Lm5hbWVkVHlwZSh0Lm5hbWUoXCJVc2VyXCIpKSk7XG4gICAgICBleHBlY3Qobm9uTnVsbEZuKS5ub3QudG9UaHJvdygpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19