"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const camelCase_1 = __importDefault(require("lodash/camelCase"));
const path_1 = __importDefault(require("path"));
const GENERATED_SUBSCRIPTIONS_DIRECTORY = path_1.default.join(__dirname, "..", "resources", "generated_subscriptions");
const GENERATED_MUTATIONS_DIRECTORY = path_1.default.join(__dirname, "..", "resources", "generated_mutations");
const GENERATED_QUERIES_DIRECTORY = path_1.default.join(__dirname, "..", "resources", "generated_queries");
class Subscription {
    constructor(subscriptionName) {
        this.subscriptionName = subscriptionName;
    }
    pre() {
        return `${this.subscriptionName}SubscriptionVariables, ${this.subscriptionName}Subscription`;
    }
    main() {
        const graphqlString = fs_1.default.readFileSync(path_1.default.join(GENERATED_SUBSCRIPTIONS_DIRECTORY, this.subscriptionName + ".graphql"), "utf8");
        return `${(0, camelCase_1.default)(this.subscriptionName)} = async (vars: ${this.subscriptionName}SubscriptionVariables, sink: Sink<ExecutionResult<${this.subscriptionName}Subscription>>) => this.sdk.subscribe(\`${graphqlString}\`, vars, sink);`;
    }
}
class Mutation {
    constructor(mutationName) {
        this.mutationName = mutationName;
    }
    pre() {
        return `${this.mutationName}Document,
  ${this.mutationName}MutationVariables`;
    }
    main() {
        return `${(0, camelCase_1.default)(this.mutationName)} = async (vars: ${this.mutationName}MutationVariables) => this.sdk.mutation(${this.mutationName}Document, vars);`;
    }
}
class Query {
    constructor(queryName) {
        this.queryName = queryName;
    }
    pre() {
        return `${this.queryName}Document,
  ${this.queryName}QueryVariables`;
    }
    main() {
        return `${(0, camelCase_1.default)(this.queryName)} = async (vars: ${this.queryName}QueryVariables) => this.sdk.query(${this.queryName}Document, vars);`;
    }
}
class SDK {
    constructor() {
        this.queries = [];
        this.mutations = [];
        this.subscriptions = [];
        this.initialize();
    }
    initialize() {
        // crawl the generatedQueries and then create the typescript code for that query.
        const queries = fs_1.default.readdirSync(GENERATED_QUERIES_DIRECTORY);
        const mutations = fs_1.default.readdirSync(GENERATED_MUTATIONS_DIRECTORY);
        const subscriptions = fs_1.default.readdirSync(GENERATED_SUBSCRIPTIONS_DIRECTORY);
        for (const file of queries) {
            this.queries.push(new Query(path_1.default.basename(file, ".graphql")));
        }
        for (const file of mutations) {
            this.mutations.push(new Mutation(path_1.default.basename(file, ".graphql")));
        }
        for (const file of subscriptions) {
            this.subscriptions.push(new Subscription(path_1.default.basename(file, ".graphql")));
        }
    }
    printSubscriptions() {
        return `
// THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT IT DIRECTLY
import {
${this.subscriptions.map((q) => "  " + q.pre()).join(",\n")}
} from "./generated/graphql";
import { Codex } from "./index";
import { ExecutionResult, Sink } from "graphql-ws";

export class Subscribe {
  constructor(private sdk: Codex) {}
  ${this.subscriptions.map((q) => q.main()).join("\n")}
}
    `;
    }
    printMutations() {
        return `
// THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT IT DIRECTLY
import {
${this.mutations.map((q) => "  " + q.pre()).join(",\n")}
} from "./generated/graphql";
      import { Codex } from "./index";

      export class Mutation {
        constructor(private sdk: Codex) {}
        ${this.mutations.map((q) => q.main()).join("\n")}
      }
    `;
    }
    printQueries() {
        return `
// THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT IT DIRECTLY
import {
${this.queries.map((q) => "  " + q.pre()).join(",\n")}
} from "./generated/graphql";
      import { Codex } from "./index";

      export class Query {
        constructor(private sdk: Codex) {}
        ${this.queries.map((q) => q.main()).join("\n")}
      }
    `;
    }
    output() {
        fs_1.default.writeFileSync(path_1.default.join(__dirname, "..", "sdk", "Subscribe.ts"), this.printSubscriptions(), "utf8");
        fs_1.default.writeFileSync(path_1.default.join(__dirname, "..", "sdk", "Mutation.ts"), this.printMutations(), "utf8");
        fs_1.default.writeFileSync(path_1.default.join(__dirname, "..", "sdk", "Query.ts"), this.printQueries(), "utf8");
    }
}
function run() {
    return __awaiter(this, void 0, void 0, function* () {
        const sdk = new SDK();
        sdk.output();
    });
}
run().then(() => process.exit());
//# sourceMappingURL=buildSdk.js.map