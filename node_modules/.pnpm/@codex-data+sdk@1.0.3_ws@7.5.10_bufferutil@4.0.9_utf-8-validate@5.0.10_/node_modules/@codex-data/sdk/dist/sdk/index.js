"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Codex = void 0;
const graphql_request_1 = require("graphql-request");
const graphql_ws_1 = require("graphql-ws");
const isomorphic_ws_1 = __importDefault(require("isomorphic-ws"));
const invariant_1 = require("./invariant");
const Mutation_1 = require("./Mutation");
const Query_1 = require("./Query");
const Subscribe_1 = require("./Subscribe");
class Codex {
    constructor(apiKey, apiUrl = `https://graph.codex.io/graphql`, apiRealtimeUrl = `wss://graph.codex.io/graphql`) {
        this.apiKey = apiKey;
        this.apiUrl = apiUrl;
        this.apiRealtimeUrl = apiRealtimeUrl;
        (0, invariant_1.invariant)(this.apiKey, "apiKey must be defined");
        this.queries = new Query_1.Query(this);
        this.mutations = new Mutation_1.Mutation(this);
        this.subscriptions = new Subscribe_1.Subscribe(this);
        this.client = new graphql_request_1.GraphQLClient(this.apiUrl, {
            method: "POST",
            headers: new Headers({
                "Content-Type": "application/json",
                Authorization: this.apiKey,
                "X-Apollo-Operation-Name": "query",
            }),
        });
        this.wsClient = (0, graphql_ws_1.createClient)({
            webSocketImpl: isomorphic_ws_1.default,
            keepAlive: 10000,
            url: this.apiRealtimeUrl,
            connectionParams: {
                Authorization: this.apiKey,
            },
        });
    }
    query(doc, args = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.request(doc, ...[args]);
            return res;
        });
    }
    mutation(doc, args = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.request(doc, ...[args]);
            return res;
        });
    }
    // Very simple network based fetch implementation, no compilation required
    send(gqlString, args = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.request(gqlString, args);
            return res;
        });
    }
    subscribe(doc, args, sink) {
        const cleanup = this.wsClient.subscribe({
            query: doc,
            variables: args,
        }, sink);
        return cleanup;
    }
}
exports.Codex = Codex;
//# sourceMappingURL=index.js.map