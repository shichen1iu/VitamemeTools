"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const getNetworksDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "Networks" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "getNetworks" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "Field", name: { kind: "Name", value: "id" } },
                                { kind: "Field", name: { kind: "Name", value: "name" } },
                            ],
                        },
                    },
                ],
            },
        },
    ],
};
const getNetworksString = `query GetNetworks { getNetworks { id } }`;
const subscribePriceUpdatedString = `subscription onPriceUpdated($address: String!, $networkId: Int!) { onPriceUpdated(address: $address, networkId: $networkId) { address networkId priceUsd timestamp } }`;
describe("Codex", () => {
    let sdk;
    beforeEach(() => {
        sdk = new index_1.Codex("dummy-key");
    });
    describe("query", () => {
        it("send a fetch request with the correct params", () => __awaiter(void 0, void 0, void 0, function* () {
            const fetchSpy = jest
                .spyOn(sdk["client"], "request")
                .mockResolvedValue({});
            yield sdk.query(getNetworksDocument, {});
            expect(fetchSpy).toHaveBeenCalledWith(getNetworksDocument, {});
        }));
    });
    describe("send", () => {
        it("should return the results of the query", () => __awaiter(void 0, void 0, void 0, function* () {
            const fetchSpy = jest
                .spyOn(sdk["client"], "request")
                .mockResolvedValue({});
            yield sdk.send(getNetworksString, {});
            expect(fetchSpy).toHaveBeenCalledWith(getNetworksString, {});
        }));
    });
    describe("subscribe", () => {
        it("should return a cleanup function", () => {
            const next = jest.fn(), error = jest.fn(), complete = jest.fn();
            const sink = {
                next,
                error,
                complete,
            };
            jest.spyOn(sdk["wsClient"], "subscribe").mockReturnValue(() => { });
            const cleanup = sdk.subscribe(subscribePriceUpdatedString, { address: "0xtoken", networkId: 1 }, sink);
            expect(typeof cleanup).toBe("function");
        });
    });
});
//# sourceMappingURL=index.test.js.map