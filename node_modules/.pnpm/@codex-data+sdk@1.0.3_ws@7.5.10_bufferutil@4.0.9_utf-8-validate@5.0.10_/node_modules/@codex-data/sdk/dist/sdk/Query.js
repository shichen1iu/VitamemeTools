"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Query = void 0;
// THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT IT DIRECTLY
const graphql_1 = require("./generated/graphql");
class Query {
    constructor(sdk) {
        this.sdk = sdk;
        this.listPairsForToken = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.ListPairsForTokenDocument, vars); });
        this.getExchanges = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetExchangesDocument, vars); });
        this.getNftPoolCollection = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetNftPoolCollectionDocument, vars); });
        this.filterNftPoolCollections = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.FilterNftPoolCollectionsDocument, vars); });
        this.getNetworks = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetNetworksDocument, vars); });
        this.listTopTokens = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.ListTopTokensDocument, vars); });
        this.primeBalance = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.PrimeBalanceDocument, vars); });
        this.getNftPoolEvents = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetNftPoolEventsDocument, vars); });
        this.balances = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.BalancesDocument, vars); });
        this.filterTokens = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.FilterTokensDocument, vars); });
        this.getNetworkStatus = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetNetworkStatusDocument, vars); });
        this.getDetailedNftStats = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetDetailedNftStatsDocument, vars); });
        this.getNftPool = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetNftPoolDocument, vars); });
        this.getLatestTokens = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetLatestTokensDocument, vars); });
        this.getNftEvents = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetNftEventsDocument, vars); });
        this.getTokensInfo = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetTokensInfoDocument, vars); });
        this.searchNfts = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.SearchNftsDocument, vars); });
        this.getParallelAssets = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetParallelAssetsDocument, vars); });
        this.getTokenInfo = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetTokenInfoDocument, vars); });
        this.getSimulateTokenContractResults = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetSimulateTokenContractResultsDocument, vars); });
        this.getLatestPairs = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetLatestPairsDocument, vars); });
        this.getUniV3Ticks = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetUniV3TicksDocument, vars); });
        this.tokenSparklines = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.TokenSparklinesDocument, vars); });
        this.tokens = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.TokensDocument, vars); });
        this.getTokenPrices = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetTokenPricesDocument, vars); });
        this.getBars = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetBarsDocument, vars); });
        this.getDetailedPairsStats = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetDetailedPairsStatsDocument, vars); });
        this.listPairsWithMetadataForToken = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.ListPairsWithMetadataForTokenDocument, vars); });
        this.walletNftCollections = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.WalletNftCollectionsDocument, vars); });
        this.getNftPoolsByCollectionAndExchange = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetNftPoolsByCollectionAndExchangeDocument, vars); });
        this.getParallelCardChanges = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetParallelCardChangesDocument, vars); });
        this.getEventLabels = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetEventLabelsDocument, vars); });
        this.getCommunityNotes = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetCommunityNotesDocument, vars); });
        this.apiTokens = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.ApiTokensDocument, vars); });
        this.filterNftParallelAssets = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.FilterNftParallelAssetsDocument, vars); });
        this.tokenLifecycleEvents = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.TokenLifecycleEventsDocument, vars); });
        this.chartUrls = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.ChartUrlsDocument, vars); });
        this.backfillWalletState = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.BackfillWalletStateDocument, vars); });
        this.getPrimePools = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetPrimePoolsDocument, vars); });
        this.token = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.TokenDocument, vars); });
        this.getNftPoolStats = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetNftPoolStatsDocument, vars); });
        this.getTokenEventsForMaker = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetTokenEventsForMakerDocument, vars); });
        this.top10HoldersPercent = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.Top10HoldersPercentDocument, vars); });
        this.filterNftPools = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.FilterNftPoolsDocument, vars); });
        this.getPrimePoolEvents = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetPrimePoolEventsDocument, vars); });
        this.getTokenCount = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetTokenCountDocument, vars); });
        this.getNftContracts = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetNftContractsDocument, vars); });
        this.nftHolders = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.NftHoldersDocument, vars); });
        this.getNftAssets = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetNftAssetsDocument, vars); });
        this.primeHolders = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.PrimeHoldersDocument, vars); });
        this.getNftPoolCollectionsByExchange = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetNftPoolCollectionsByExchangeDocument, vars); });
        this.getNftCollectionMetadata = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetNftCollectionMetadataDocument, vars); });
        this.getPrimePoolAssets = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetPrimePoolAssetsDocument, vars); });
        this.walletNftCollectionAssets = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.WalletNftCollectionAssetsDocument, vars); });
        this.getNftPoolsByOwner = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetNftPoolsByOwnerDocument, vars); });
        this.filterPairs = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.FilterPairsDocument, vars); });
        this.liquidityMetadata = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.LiquidityMetadataDocument, vars); });
        this.liquidityLocks = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.LiquidityLocksDocument, vars); });
        this.filterExchanges = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.FilterExchangesDocument, vars); });
        this.pairMetadata = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.PairMetadataDocument, vars); });
        this.apiToken = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.ApiTokenDocument, vars); });
        this.getTokenEvents = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetTokenEventsDocument, vars); });
        this.getWebhooks = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetWebhooksDocument, vars); });
        this.listFavoriteTokens = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.ListFavoriteTokensDocument, vars); });
        this.filterNftCollections = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.FilterNftCollectionsDocument, vars); });
        this.holders = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.HoldersDocument, vars); });
        this.getNetworkStats = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetNetworkStatsDocument, vars); });
        this.getDetailedPairStats = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetDetailedPairStatsDocument, vars); });
        this.getSymbol = (vars) => __awaiter(this, void 0, void 0, function* () { return this.sdk.query(graphql_1.GetSymbolDocument, vars); });
    }
}
exports.Query = Query;
//# sourceMappingURL=Query.js.map