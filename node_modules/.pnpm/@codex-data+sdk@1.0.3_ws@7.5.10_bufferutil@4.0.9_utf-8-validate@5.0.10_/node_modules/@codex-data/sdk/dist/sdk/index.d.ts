import { TypedDocumentNode } from "@graphql-typed-document-node/core";
import { Variables } from "graphql-request";
import { ExecutionResult, Sink } from "graphql-ws";
import { Mutation } from "./Mutation";
import { Query } from "./Query";
import { Subscribe } from "./Subscribe";
export type CleanupFunction = () => void;
export declare class Codex {
    private apiKey;
    private apiUrl;
    private apiRealtimeUrl;
    private client;
    private wsClient;
    queries: Query;
    mutations: Mutation;
    subscriptions: Subscribe;
    constructor(apiKey: string, apiUrl?: string, apiRealtimeUrl?: string);
    query<TResults, TVars extends Variables>(doc: TypedDocumentNode<TResults, TVars>, args?: TVars): Promise<TResults>;
    mutation<TResults, TVars extends Variables>(doc: TypedDocumentNode<TResults, TVars>, args?: TVars): Promise<TResults>;
    send<TResults, V extends Variables = Variables>(gqlString: string, args?: V): Promise<TResults>;
    subscribe<TResults, TVars extends Record<string, unknown> = Record<string, never>>(doc: string, args: TVars, sink: Sink<ExecutionResult<TResults>>): CleanupFunction;
}
//# sourceMappingURL=index.d.ts.map